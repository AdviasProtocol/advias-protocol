//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import {WadRayMath} from '../libraries/WadRayMath.sol';
import {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';
import {PoolStorage} from './PoolStorage.sol';
import {IPool} from './IPool.sol';
import {PoolLogic} from '../libraries/PoolLogic.sol';
import {ICollateralToken} from '../tokens/ICollateralToken.sol';
import {IAvaToken} from '../tokens/IAvaToken.sol';
import {IDebtToken} from '../tokens/IDebtToken.sol';
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import {SafeERC20Upgradeable} from "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol";
import {IERC20Upgradeable} from "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";
import {IRewardsTokenBase} from '../tokens/IRewardsTokenBase.sol';
import {ILiquidationCaller} from './ILiquidationCaller.sol';

import "hardhat/console.sol";

// actual
// Vaults like DAI/UST are required because debt rates are determined by collateral to ensure
// the return on collateral alone is higher than the debt repayments
contract Pool is Initializable, UUPSUpgradeable, OwnableUpgradeable, IPool, PoolStorage {
    using SafeMath for uint256;
    using SafeERC20Upgradeable for IERC20Upgradeable;
    using WadRayMath for uint256;

    modifier whenNotPaused() {
        require(!paused, "Errors: Pool paused");
        _;
    }

    function getAddressesProvider() external view override returns (address) {
        // in storage
        return address(addressesProvider);
    }

    function initialize(IPoolAddressesProvider provider) external initializer {
        addressesProvider = provider;
    }

    function _authorizeUpgrade(address) internal override onlyOwner {}

    // bonus
    function depositCollateralAndBorrow(
        address _collateralAsset, //
        address _debtAsset, // wrapp to borrow
        address account, // on behalf of
        uint256 amount// collateral amount
    ) external override whenNotPaused {
        PoolAsset storage collateralAsset = poolAssets[_collateralAsset];
        PoolAsset storage debtAsset = poolAssets[_debtAsset];
        UserData storage userData = usersData[msg.sender];


        PoolLogic.accrueInterest(
            collateralAsset
        );

        PoolLogic.accrueInterest(
            debtAsset
        );

        uint256 borrowAmount = amount;

        // requirements
        // user isn't already borrowing

        PoolLogic.validateDepositCollateralAndBorrow(
            collateralAsset,
            debtAsset,
            addressesProvider.getPriceOracle(),
            amount,
            userData,
            borrowAmount
        );
        // transfer in asset to collateral instance
        IERC20Upgradeable(collateralAsset.asset).safeTransferFrom(msg.sender, collateralAsset.collateralAssetWrapped, amount);

        // mint token
        // send assets to anchor
        // we use bonus factor instead of amount+bonus to accuratly supply bridge with `amount`
        uint256 amountBack = ICollateralToken(collateralAsset.collateralAssetWrapped).mint(
            msg.sender,
            amount,
            collateralAsset.collateralExchangeRate
        );

        //update amount for amountBack
        // if amount back is > === allow higher collateral principal luck
        borrowAmount = amountBack > amount ? borrowAmount : amountBack;

        borrowAmount = PoolLogic.getValueMatchAmount(
            addressesProvider.getPriceOracle(),
            borrowAmount,
            collateralAsset.decimals,
            debtAsset
        );

        // send out asset 1:1
        // mint token
        IDebtToken(debtAsset.debtWrappedAsset).mint(
            msg.sender,
            borrowAmount,
            debtAsset.borrowExchangeRate
        );

        // transfer underlying to borrower
        IAvaToken(debtAsset.wrapped).transferUnderlyingTo(msg.sender, borrowAmount);

        userData.borrowing = true;
        userData.startTimestamp = block.timestamp;

        emit DepositCollateralAndBorrow(
            msg.sender,
            _collateralAsset,
            _debtAsset,
            amount,
            borrowAmount // amount can be differentt due to bonus
        );

    }

    function depositSavings(
        address account,
        address asset, // savings asset
        uint256 amount
    ) external whenNotPaused override {
        PoolAsset storage poolAsset = poolAssets[asset];
        console.log("in depositSavings");
        // dont check amount, bridge reverts is min not hit
        PoolLogic.validateDepositSavings(
            poolAsset
        );
        // update exchangeRate
        // get rate

        PoolLogic.accrueInterest(
            poolAsset
        );

        console.log("in depositSavings after accrueInterest");

        // send underlying deposited to wrapped token contract
        // transfer from msg.sender
        IERC20Upgradeable(asset).safeTransferFrom(msg.sender, poolAsset.wrapped, amount);
        console.log("in depositSavings after safeTransferFrom");
        // how much to send to anchor
        // accounts for bridging fees
        uint256 bridgeSupplyAmount = PoolLogic.bridgeSupplyOnDepositSavings(
            poolAsset,
            amount
        );
        console.log("in depositSavings after bridgeSupplyAmount", bridgeSupplyAmount);

        // mint token to account
        IAvaToken(poolAsset.wrapped).mint_(
            account,
            amount.sub(bridgeSupplyAmount),
            bridgeSupplyAmount,
            poolAsset.overallExchangeRate
        );

        emit DepositSavings(
            msg.sender,
            asset,
            amount
        );

    }

    // repay debt and withdraw collateral
    // only full repay
    function repayAndWithdraw(
        address _collateralAsset,
        address _debtAsset,
        address account,
        uint256 amount
    ) external whenNotPaused override {
        PoolAsset storage collateralAsset = poolAssets[_collateralAsset];
        PoolAsset storage debtAsset = poolAssets[_debtAsset];
        UserData storage userData = usersData[msg.sender];

        PoolLogic.accrueInterest(
            collateralAsset
        );

        PoolLogic.accrueInterest(
            debtAsset
        );

        // requirements
        // repay >= debt
        // update repay amount if >
        // get user debt amount
        (uint256 debt, uint256 repayAmount) = PoolLogic.confirmRepayAmount(
            debtAsset.debtWrappedAsset,
            amount
        );

        // requirements
        // min timeframe reached
        PoolLogic.validateRepay(
            debtAsset,
            collateralAsset,
            userData,
            repayAmount,
            debt
        );

        uint256 collateralBurnAmount = IERC20Upgradeable(collateralAsset.collateralAssetWrapped).balanceOf(msg.sender);

        ICollateralToken(collateralAsset.collateralAssetWrapped).burn(msg.sender, msg.sender, collateralBurnAmount, collateralAsset.collateralExchangeRate);

        // allows borrower to withdraw collateral on 0 debt balance
        // can happen on full liquidations
        if (repayAmount > 0) {
            IDebtToken(debtAsset.debtWrappedAsset).burn(msg.sender, repayAmount, debtAsset.borrowExchangeRate);
            // transfer in debt asset to repay
            IERC20Upgradeable(_debtAsset).safeTransferFrom(msg.sender, debtAsset.wrapped, repayAmount);
        }

        userData.borrowing = false;
        userData.startTimestamp = 0;

        // may not need here sine debt repay is accounted for
        emit RepayAndWithdraw(
            msg.sender,
            _collateralAsset,
            _debtAsset,
            repayAmount
        );

    }

    function withdrawSavings(
        address account,
        address asset,
        uint256 amount,
        bool emergency
    ) external whenNotPaused override {
        PoolAsset storage poolAsset = poolAssets[asset];

        PoolLogic.accrueInterest(
            poolAsset
        );

        // amount to withdraw from anchor and send directly to user
        // this is the difference between current amount in anchor minus amount required in anchor after withdraw
        uint256 redeemToAccountAmount = PoolLogic.bridgeRemovalOnWithdrawSavings(
            poolAsset,
            amount
        );

        PoolLogic.validateWithdrawSavings(
            poolAsset,
            msg.sender,
            amount,
            redeemToAccountAmount
            /* emergency */
        );

        if (redeemToAccountAmount != 0) {
            // decimals update in _redeem
            IAvaToken(poolAsset.wrapped)._redeem(
                poolAsset.bridgeAddress,
                redeemToAccountAmount,
                msg.sender,
                emergency
            );
        }

        // redeemToAccountAmount doesn't inlude fees therefor can be reduced from totalDepositsLendable

        IAvaToken(poolAsset.wrapped).burn_(
            msg.sender,
            amount,
            redeemToAccountAmount,
            poolAsset.overallExchangeRate
        );

        emit WithdrawSavings(
            msg.sender,
            asset,
            amount
        );
    }

    // tracks lendable deposit assets (deposits - bridged deposits)
    function updateTotalDepositsLendable(address asset, uint256 amountAdded, uint256 amountRemoved) external override {
        PoolAsset storage poolAsset = poolAssets[asset];
        poolAsset.totalDepositsLendable = poolAsset.totalDepositsLendable.add(amountAdded).sub(amountRemoved);
    }

    struct liquidationCallParams {
        address borrower;
        address _debtAsset;
        address _collateralAsset;
    }


    function liquidationCall(
        address borrower,
        address _debtAsset,
        address _collateralAsset,
        uint256 amount
    ) external override whenNotPaused {
        liquidationCallParams memory params;
        params.borrower = borrower;
        params._debtAsset = _debtAsset;
        params._collateralAsset = _collateralAsset;

        PoolStorage.PoolAsset storage debtAsset = poolAssets[params._debtAsset];
        PoolStorage.PoolAsset storage collateralAsset = poolAssets[params._collateralAsset];
        UserData storage userData = usersData[borrower];

        PoolLogic.accrueInterest(
            collateralAsset
        );

        PoolLogic.accrueInterest(
            debtAsset
        );

        // require timeframe
        // require debt
        PoolLogic.validateLiquidationCall(
            collateralAsset,
            debtAsset,
            userData,
            borrower
        );

        bool success = ILiquidationCaller(addressesProvider.getLiquidationCaller()).liquidationCall(
            borrower,
            msg.sender,
            debtAsset,
            collateralAsset,
            userData,
            amount
        );

    }

    // for PoolAssetData.sol
    function getPoolAssetData(address asset)
        external
        view
        override
        returns (PoolStorage.PoolAsset memory)
    {
        return poolAssets[asset];
    }

    function getUserData(address user)
        external
        view
        override
        returns (PoolStorage.UserData memory)
    {
        return usersData[user];
    }


    modifier onlyPoolAdmin() {
        require(msg.sender == addressesProvider.getPoolAdmin());
        _;
    }

    modifier onlyCollateralTokenFactory() {
        require(msg.sender == addressesProvider.getCollateralTokenFactory());
        _;
    }

    modifier onlySavingsTokenFactory() {
        require(msg.sender == addressesProvider.getSavingsTokenFactory());
        _;
    }


    modifier onlyDebtTokenFactory() {
        require(msg.sender == addressesProvider.getDebtTokenFactory());
        _;
    }

    // get collateralAssets

    function updateBridgeAddress(address asset, address _bridgeAddress) external onlyPoolAdmin {
        poolAssets[asset].bridgeAddress = _bridgeAddress;
    }

    function updateLtv(address asset, uint256 _ltv) external onlyPoolAdmin {
        poolAssets[asset].ltv = _ltv;
    }

    function updateReserve(address asset, address _reserve) external onlyPoolAdmin {
        poolAssets[asset].reserve = _reserve;
    }

    function updateReserveFactor(address asset, uint256 _reserveFactor) external onlyPoolAdmin {
        poolAssets[asset].reserveFactor = _reserveFactor;
    }

    function updateIsOn(address asset, bool _isActive) external onlyPoolAdmin {
        poolAssets[asset].on = _isActive;
    }

    function updateCollateralExchangeRateFactor(address asset, uint256 _collateralExchangeRateFactor) external onlyPoolAdmin {
        poolAssets[asset].collateralInterestRateFactor = _collateralExchangeRateFactor;
    }

    function updateDebtInterestRateFactor(address asset, uint256 _debtInterestRateFactor) external onlyPoolAdmin {
        poolAssets[asset].debtInterestRateFactor = _debtInterestRateFactor;
    }

    function updateDepositsSuppliedInterestRateFactor(address asset, uint256 _depositsSuppliedInterestRateFactor) external onlyPoolAdmin {
        poolAssets[asset].depositsSuppliedInterestRateFactor = _depositsSuppliedInterestRateFactor;
    }



    /* function initRewards(
        address rewardsBase,
        address wrapped
    ) external override onlyPoolAdmin {
        IRewardsTokenBase(wrapped).setRewards(
            rewardsBase
        );
    } */

    function initCollateralToken(
        address asset,
        address wrapped,
        address bridgeAddress,
        /* address bridgeExchangeRateFeederAddress, */
        uint256 bridgeMinSupplyRedeemAmount,
        uint256 bridgeMaxSupplyRedeemAmount,
        uint256 collateralInterestRateFactor
    ) external onlyCollateralTokenFactory override {
        PoolAsset storage collateralAsset = poolAssets[asset];

        PoolLogic.initCollateralToken(
            collateralAsset, // struct
            asset, // underlying
            wrapped, // collateral asset
            bridgeAddress,
            /* bridgeExchangeRateFeederAddress, */
            bridgeMinSupplyRedeemAmount,
            bridgeMaxSupplyRedeemAmount,
            collateralInterestRateFactor
        );

        addPoolAssetToListInternal(asset);
        addCollateralAssetToListInternal(asset);
        emit CollateralTokenInit(
            asset,
            wrapped
        );
    }

    function initSavingsToken(
        address asset,
        address wrapped,
        address bridgeAddress,
        uint256 bridgeMinSupplyRedeemAmount,
        uint256 depositsSuppliedInterestRateFactor
    ) external onlySavingsTokenFactory override {
        PoolAsset storage poolAsset = poolAssets[asset];
        PoolLogic.initSavingsToken(
            poolAsset,
            asset,
            wrapped,
            bridgeAddress,
            bridgeMinSupplyRedeemAmount,
            depositsSuppliedInterestRateFactor
        );
        addPoolAssetToListInternal(asset);
        addSavingsAssetToListInternal(asset);
        emit SavingsTokenInit(
            asset,
            wrapped
        );
    }

    function initDebtToken(
        address asset,
        address debtWrappedAsset,
        uint256 debtInterestRateFactor,
        uint256 ltv
    ) external onlyDebtTokenFactory override {
        PoolAsset storage poolAsset = poolAssets[asset];
        PoolLogic.initDebtToken(
            poolAsset,
            debtWrappedAsset,
            debtInterestRateFactor,
            ltv
        );
    }

    function addCollateralAssetToListInternal(address asset) internal {
        uint256 _collateralAssetsCount = collateralAssetsCount;
        bool poolCollateralAssetAlreadyAdded = false;
        for (uint256 i = 0; i < _collateralAssetsCount; i++)
            if (collateralAssetsList[i] == asset) {
                poolCollateralAssetAlreadyAdded = true;
            }
        if (!poolCollateralAssetAlreadyAdded) {
            collateralAssetsList[collateralAssetsCount] = asset;
            collateralAssetsCount = _collateralAssetsCount + 1;
        }
    }

    function addPoolAssetToListInternal(address asset) internal {
        uint256 _poolAssetsCount = poolAssetsCount;
        bool poolAssetAlreadyAdded = false;
        for (uint256 i = 0; i < _poolAssetsCount; i++)
            if (poolAssetsList[i] == asset) {
                poolAssetAlreadyAdded = true;
            }
        if (!poolAssetAlreadyAdded) {
            poolAssetsList[poolAssetsCount] = asset;
            poolAssetsCount = _poolAssetsCount + 1;
        }
    }

    function addSavingsAssetToListInternal(address asset) internal {
        uint256 _savingsAssetsCount = savingsAssetsCount;
        bool poolSavingsAssetAlreadyAdded = false;
        for (uint256 i = 0; i < _savingsAssetsCount; i++)
            if (savingsAssetsList[i] == asset) {
                poolSavingsAssetAlreadyAdded = true;
            }
        if (!poolSavingsAssetAlreadyAdded) {
            savingsAssetsList[savingsAssetsCount] = asset;
            savingsAssetsCount = _savingsAssetsCount + 1;
        }
    }

}
