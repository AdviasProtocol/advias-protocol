//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import {IERC20Metadata} from "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";

import {IPool} from '../pool/IPool.sol';

import {WadRayMath} from '../libraries/WadRayMath.sol';
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {IPoolAddressesProvider} from '../pool/IPoolAddressesProvider.sol';
import {ICollateralToken} from './ICollateralToken.sol';
import {IBridge} from '../anchor/IBridge.sol';
import {ICollateral} from '../anchor/collateral/ICollateral.sol';
import {IPoolAssetData} from '../pool/IPoolAssetData.sol';

import "hardhat/console.sol";


// represents wUST deposited
// all underlying gets sent to anchor
contract CollateralToken is ERC20, ICollateralToken {
  using SafeMath for uint256;
  using WadRayMath for uint256;
  using SafeERC20 for IERC20;

  uint8 immutable private _decimals;

  IPoolAddressesProvider public ADDRESSES_PROVIDER;
  IPoolAssetData private _poolAssetData;
  IPool private _pool;
  IBridge private _bridge;
  address private collateralTokenFactory;

  address private reserve;
  address private vault;

  address internal _underlyingAsset;

  IERC20 private _bridgeWrappedAsset;
  uint8 private _bridgeAssetDecimals;

  mapping(address => uint256) private _initialExchangeRates;

  // scaled value used for principal as _collateralPrincipalScaled * _initialExchangeRates
  // used in LTV formula as debt/_collateralPrincipalScaled
  // used as a base for bonusFactor redebt as (currentCollateralValue - (_collateralPrincipalScaled * _initialExchangeRates)) * bonus_%
  mapping(address => uint256) private _collateralPrincipalScaled;

  mapping(address => uint256) private _principalBalance;


  uint256 private bridgeTotalSupply; // manually tracked due  to bridge delays
  string private _name;
  string private _symbol;

  constructor(
      address provider,
      address underlyingAsset,
      uint8 decimals
  ) ERC20("", "") {
      string memory underlyingAssetName = ERC20(underlyingAsset).name();
      string memory underlyingAssetSymbol = ERC20(underlyingAsset).symbol();

      string memory name = string(abi.encodePacked("Advias Collateral Token ", underlyingAssetName));
      string memory symbol = string(abi.encodePacked("avaCo", underlyingAssetSymbol));

      _decimals = decimals;

      ADDRESSES_PROVIDER = IPoolAddressesProvider(provider);
      _pool = IPool(ADDRESSES_PROVIDER.getPool());
      _poolAssetData = IPoolAssetData(ADDRESSES_PROVIDER.getPoolAssetData());
      collateralTokenFactory = ADDRESSES_PROVIDER.getCollateralTokenFactory();
      _underlyingAsset = underlyingAsset;
      _name = name;
      _symbol = symbol;
      reserve = msg.sender;
      vault = msg.sender;
  }

  function decimals() public view virtual override returns (uint8) {
      return _decimals;
  }

  function name() public view virtual override returns (string memory) {
      return _name;
  }

  function symbol() public view virtual override returns (string memory) {
      return _symbol;
  }


  function initToken(
      address bridge
  ) external override {

      _bridge = IBridge(bridge);
      // save wrapped asset
      address bridgeWrappedAsset = IBridge(bridge).wrapped();

      _bridgeWrappedAsset = IERC20(bridgeWrappedAsset);

      // save underlying asset
      address bridgeUnderlying = ADDRESSES_PROVIDER.getUST();

      _bridgeAssetDecimals = IERC20Metadata(bridgeWrappedAsset).decimals();

      // approve
      IERC20(_underlyingAsset).approve(bridge, ~uint256(0));
      IERC20(bridgeWrappedAsset).approve(bridge, ~uint256(0));

  }

  modifier onlyPool() {
    require(msg.sender == address(_pool), "Error: Only pool can be sender.");
    _;
  }

  modifier onlyPoolOrLiquidationCaller() {
    require(msg.sender == address(_pool) || msg.sender == ADDRESSES_PROVIDER.getLiquidationCaller(), "Error: Only pool can be sender.");
    _;
  }

  modifier onlyCollateralTokenFactory() {
    require(msg.sender == collateralTokenFactory, "Error: Only factory can be sender.");
    _;
  }

  function mint(address account, uint256 amount, uint256 exchangeRate) external override onlyPool returns (uint256) {
      uint256 currentTimestamp = block.timestamp;

      uint256 amountBack = supply(
          amount
      );

      uint256 scaledAmount = amountBack.wadDiv(exchangeRate);

      _initialExchangeRates[account] = exchangeRate;

      _mint(account, scaledAmount);

      emit Mint(account, amount, exchangeRate);

      return amountBack;
  }

  function effectivePrincipal(address user) external view override returns (uint256) {
      return _collateralPrincipalScaled[user].wadMul(_initialExchangeRates[user]);
      /* return _principalBalance[user]; */
  }

  function effectivePrincipalScaled(address user) external view override returns (uint256) {
      return _collateralPrincipalScaled[user];
  }


  function mintToReserve(uint256 amount, uint256 exchangeRate) external override onlyPool {
      if (amount == 0) {
        return;
      }

      uint256 scaledAmount = amount.wadDiv(exchangeRate);


      _mint(reserve, scaledAmount);
      emit Mint(reserve, amount, exchangeRate);
  }

  function initBridge(address bridge) external onlyPool {
      _bridge = IBridge(bridge);
  }

  function supply(uint256 amount) internal returns (uint256) {

      uint256 amountBack = _bridge.deposit(
          amount,
          0,
          address(this)
      );
      console.log("CollateralToken amountBack", amountBack);
      require(amountBack != 0, "Error: Bridge failed.  Please try again later");

      emit BridgeDeposit(
          msg.sender,
          amount
      );

      return amountBack.mul(10**_decimals).div(10**_bridgeAssetDecimals);
  }

  function redeem(uint256 amount, address to) internal returns (uint256) {
      ( , uint256 bridgeExchangeRate) = _bridge.getInterestData();
      uint256 redeeemScaledAmount = (amount.mul(10**_decimals).div(10**_bridgeAssetDecimals)).wadDiv(bridgeExchangeRate);

      require(_bridgeWrappedAsset.balanceOf(address(this)) >= redeeemScaledAmount, "Error: Not enough balance for withdraw from Anchor, please wait.");

      uint256 amountBack = _bridge.redeem(
          redeeemScaledAmount,
          to
      );

      require(amountBack > 0, "Error: Bridge failed.  Please try again later");

      emit BridgeRedeem(
          to,
          amount
      );

      return amountBack.mul(10**_decimals).div(10**_bridgeAssetDecimals);
  }

  function burn(address account, address receiver, uint256 amount, uint256 exchangeRate) external override onlyPoolOrLiquidationCaller {
      uint256 totalCollateral = balanceOfScaled(account).wadMul(exchangeRate);

      redeem(
          amount,
          receiver
      );

      uint256 scaledAmount = amount.wadDiv(exchangeRate);

      _burn(account, scaledAmount);

      emit Burn(account, receiver, amount, exchangeRate);
  }

  function balanceOfPrincipal(address account) external view override returns (uint256) {
      return super.balanceOf(account).wadMul(_initialExchangeRates[account]);
  }

  function balanceOfScaled(address account) public view override returns (uint256) {
      return super.balanceOf(account);
  }

  function balanceOf(address account) public view virtual override returns (uint256) {
      uint256 scaledAmount = super.balanceOf(account);
      uint256 collateralExchangeRate = _poolAssetData.simulateCollateralExchangeRate(_underlyingAsset);
      return scaledAmount.wadMul(collateralExchangeRate);
  }

  function totalScaledSupply() external view override returns (uint256) {
      return super.totalSupply();
  }

  function totalSupply() public view virtual override returns (uint256) {
      uint256 collateralExchangeRate = _poolAssetData.simulateCollateralExchangeRate(_underlyingAsset);
      return super.totalSupply().wadMul(collateralExchangeRate);
  }

  // bridging may not be accurately depicted due to off chain events taking place in ddifferent blocks
  // total amount currently available through aUST
  function bridgeTotalScaledSupply() external view returns (uint256) {
      return _bridgeWrappedAsset.balanceOf(address(this)); //aUST
  }

  function bridgeTotalScaledSupplyStored() external view returns (uint256) {
      return bridgeTotalSupply; // stored
  }

}
