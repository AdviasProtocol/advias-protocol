//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import {IERC20Metadata} from "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";

import {IPool} from '../pool/IPool.sol';

import {WadRayMath} from '../libraries/WadRayMath.sol';
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {IPoolAddressesProvider} from '../pool/IPoolAddressesProvider.sol';
import {ICollateralToken} from './ICollateralToken.sol';
import {IBridge} from '../anchor/IBridge.sol';
import {ICollateral} from '../anchor/collateral/ICollateral.sol';
import {Collateral} from '../anchor/collateral/Collateral.sol';
import {IRouter} from '../anchor/IRouter.sol';
import {IExchangeRateData} from '../anchor/IExchangeRateData.sol';

import {IPoolAssetData} from '../pool/IPoolAssetData.sol';

import "hardhat/console.sol";


// represents wUST deposited
// all underlying gets sent to anchor
contract CollateralToken is ERC20, ICollateralToken {
  using SafeMath for uint256;
  using WadRayMath for uint256;
  using SafeERC20 for IERC20;

  uint8 immutable private _decimals;

  IPoolAddressesProvider public ADDRESSES_PROVIDER;
  IPoolAssetData private _poolAssetData;
  IPool private _pool;
  IBridge private _bridge;

  /* IRouter private _router; */

  address private collateralTokenFactory;

  address private reserve;
  address private vault;

  address internal _underlyingAsset;

  IERC20 private _routerWrapped;
  uint8 private _routerAssetDecimals;

  IERC20 private _routerUnderlying;

  mapping(address => uint256) private _initialExchangeRates;

  // scaled value used for principal as _collateralPrincipalScaled * _initialExchangeRates
  // used in LTV formula as debt/_collateralPrincipalScaled
  // used as a base for bonusFactor redebt as (currentCollateralValue - (_collateralPrincipalScaled * _initialExchangeRates)) * bonus_%
  mapping(address => uint256) private _collateralPrincipalScaled;

  mapping(address => uint256) private _principalBalance;

  mapping(address => address) private _accountCollateralInstances;

  uint256 private bridgeTotalSupply; // manually tracked due  to bridge delays
  string private _name;
  string private _symbol;

  constructor(
      address provider,
      address underlyingAsset,
      uint8 decimals
  ) ERC20("", "") {
      string memory underlyingAssetName = ERC20(underlyingAsset).name();
      string memory underlyingAssetSymbol = ERC20(underlyingAsset).symbol();

      string memory name = string(abi.encodePacked("Advias Collateral Token ", underlyingAssetName));
      string memory symbol = string(abi.encodePacked("avaCo", underlyingAssetSymbol));

      _decimals = decimals;

      ADDRESSES_PROVIDER = IPoolAddressesProvider(provider);
      _pool = IPool(ADDRESSES_PROVIDER.getPool());
      _poolAssetData = IPoolAssetData(ADDRESSES_PROVIDER.getPoolAssetData());
      collateralTokenFactory = ADDRESSES_PROVIDER.getCollateralTokenFactory();
      _underlyingAsset = underlyingAsset;
      _name = name;
      _symbol = symbol;
      reserve = msg.sender;
      vault = msg.sender;
      initRouter();
  }

  function decimals() public view virtual override returns (uint8) {
      return _decimals;
  }

  function name() public view virtual override returns (string memory) {
      return _name;
  }

  function symbol() public view virtual override returns (string memory) {
      return _symbol;
  }

  function initRouter() public override {
      address router = ADDRESSES_PROVIDER.getRouter();
      uint256 MAX = ~uint256(0);
      _routerWrapped = IERC20(IRouter(router)._wrappedAsset());
      _routerUnderlying = IERC20(IRouter(router)._underlyingAsset());
      _routerWrapped.approve(router, MAX);
      IERC20(_underlyingAsset).approve(router, MAX);
      _routerAssetDecimals = IERC20Metadata(address(_routerUnderlying)).decimals();
  }

  modifier onlyPool() {
    require(msg.sender == address(_pool), "Error: Only pool can be sender.");
    _;
  }

  modifier onlyPoolOrLiquidationCaller() {
    require(msg.sender == address(_pool) || msg.sender == ADDRESSES_PROVIDER.getLiquidationCaller(), "Error: Only pool can be sender.");
    _;
  }

  modifier onlyCollateralTokenFactory() {
    require(msg.sender == collateralTokenFactory, "Error: Only factory can be sender.");
    _;
  }

  // deposit UST only
  function deposit(address account, uint256 amount) external override onlyPool returns (bool) {
      address collateralAddress = _accountCollateralInstances[account];
      if (collateralAddress == address(0)) {
          Collateral collateralInstance = new Collateral(
              ADDRESSES_PROVIDER,
              _underlyingAsset,
              address(this)
          );
          IERC20(_underlyingAsset).approve(address(collateralInstance), ~uint256(0));

          _accountCollateralInstances[account] = address(collateralInstance);
          collateralAddress = address(collateralInstance);
      }

      IERC20(_underlyingAsset).transfer(collateralAddress, amount);

      ICollateral(collateralAddress).supply(
          amount
      );

      return true;
  }

  function mint(address account, uint256 amount, uint256 exchangeRate) external override onlyPool {
      uint256 scaledAmount = amountBack.wadDiv(exchangeRate);
      _mint(account, scaledAmount);
      emit Mint(account, amount, exchangeRate);
  }

  function effectivePrincipal(address user) external view override returns (uint256) {
      return _collateralPrincipalScaled[user].wadMul(_initialExchangeRates[user]);
      /* return _principalBalance[user]; */
  }

  function effectivePrincipalScaled(address user) external view override returns (uint256) {
      return _collateralPrincipalScaled[user];
  }

  function mintToReserve(uint256 amount, uint256 exchangeRate) external override onlyPool {
      if (amount == 0) {
        return;
      }

      uint256 scaledAmount = amount.wadDiv(exchangeRate);


      _mint(reserve, scaledAmount);
      emit Mint(reserve, amount, exchangeRate);
  }

  function initBridge(address bridge) external onlyPool {
      _bridge = IBridge(bridge);
  }

  function supplyLiquidityVault(address asset, address vault, uint256 bufferFactor) external override onlyPool {
      ( , uint256 bridgeExchangeRate) = IExchangeRateData(ADDRESSES_PROVIDER.getExchangeRateData()).getInterestData();
      uint256 balance = _routerWrapped.balanceOf(address(this)).wadMul(bridgeExchangeRate);

      uint256 totalSupply = totalSupply();
      uint256 bufferBalance = balance.add(balance.wadMul(bufferFactor));

      if (totalSupply > balance) {
          uint256 valueDelta = totalSupply.sub(balance);
          uint256 amountDelta = valueDelta.wadDiv(bridgeExchangeRate);
          // router require 10 eth
          console.log("supplyLiquidityVault 1");
          if (amountDelta <= 10e18) { return; }
          console.log("supplyLiquidityVault 2");
          IRouter(ADDRESSES_PROVIDER.getRouter()).redeemStableNR(
              amountDelta,
              vault,
              asset
          );
      }
  }

  function supply(uint256 amount) internal returns (uint256) {

      /* uint256 amountBack = _bridge.deposit(
          amount,
          0,
          address(this)
      ); */

      ( , uint256 amountBack) = IRouter(ADDRESSES_PROVIDER.getRouter()).depositStable(
          _underlyingAsset,
          amount,
          0,
          address(this)
      );

      require(amountBack != 0, "Error: Bridge failed.  Please try again later");

      emit BridgeDeposit(
          msg.sender,
          amount
      );

      return amountBack.mul(10**_decimals).div(10**_routerAssetDecimals);
  }

  function redeem(uint256 amount, address to) internal returns (uint256) {
      ( , uint256 bridgeExchangeRate) = IExchangeRateData(ADDRESSES_PROVIDER.getExchangeRateData()).getInterestData();
      uint256 redeeemScaledAmount = (amount.mul(10**_decimals).div(10**_routerAssetDecimals)).wadDiv(bridgeExchangeRate);

      require(_routerWrapped.balanceOf(address(this)) >= redeeemScaledAmount, "Error: Not enough balance for withdraw from Anchor, please wait.");

      /* uint256 amountBack = _bridge.redeem(
          redeeemScaledAmount,
          to
      ); */

      uint256 amountBack = IRouter(ADDRESSES_PROVIDER.getRouter()).redeemStable(
          amount,
          address(this),
          _underlyingAsset
      );

      require(amountBack > 0, "Error: Bridge failed.  Please try again later");

      emit BridgeRedeem(
          to,
          amount
      );

      return amountBack.mul(10**_decimals).div(10**_routerAssetDecimals);
  }


  function burnAndRedeem(address account, address receiver, uint256 amount, uint256 exchangeRate) external override onlyPoolOrLiquidationCaller {
      require(amount != 0, "Error: Burn amount cannot be zero");
      /* uint256 totalCollateral = balanceOfScaled(account).wadMul(exchangeRate); */
      ( , uint256 bridgeExchangeRate) = IExchangeRateData(ADDRESSES_PROVIDER.getExchangeRateData()).getInterestData();

      IRouter(ADDRESSES_PROVIDER.getRouter()).redeemStable(
          amount.wadDiv(bridgeExchangeRate),
          receiver,
          _underlyingAsset
      );

      uint256 scaledAmount = amount.wadDiv(exchangeRate);

      _burn(account, scaledAmount);

      emit Burn(account, receiver, amount, exchangeRate);
  }

  // transfers aUST to reeiver
  function burnAndTransfer(address account, address receiver, uint256 amount, uint256 exchangeRate) external override onlyPoolOrLiquidationCaller {
      require(amount != 0, "Error: Burn amount cannot be zero");
      ( , uint256 bridgeExchangeRate) = IExchangeRateData(ADDRESSES_PROVIDER.getExchangeRateData()).getInterestData();

      uint256 transferScaledAmount = (amount.mul(10**_routerAssetDecimals).div(10**_decimals)).wadDiv(bridgeExchangeRate);
      _routerWrapped.transfer(receiver, transferScaledAmount);

      uint256 scaledAmount = amount.wadDiv(exchangeRate);

      _burn(account, scaledAmount);

      emit Burn(account, receiver, amount, exchangeRate);
  }

  /* function burn(address account, address reciever, uint256 amount, uint256 exchangeRate, bool redeemFull) external override onlyPool {
      // amount = 500
      // scaled 490.19607843137254901960784313725 = 50/ 1.02
      uint256 scaledAmount = amount.wadDiv(exchangeRate);

      // what percentage of borrowers collateral amount
      // 1000
      // this is our assumed value of user funds in UST (adjusted with our formula)
      uint256 balanceValue = balanceOfScaled(account).wadMul(exchangeRate); // borrower total collateral balance value

      uint256 percentage = 0;
      if (redeemFull) {
          percentage = 1e18;
          scaledAmount = balanceOfScaled(account);
          _collateralPrincipalScaled[account] = 0;
      } else {
          _collateralPrincipalScaled[account] = _collateralPrincipalScaled[account].sub(amount.wadDiv(_initialExchangeRates[account]));
      }

      address collateralAddress = _accountCollateralInstances[account];
      uint256 amountBack = ICollateral(collateralAddress).redeem(
          amount,
          balanceValue,
          reciever
      );
      require(amountBack > 0, "Error: Bridge failed.  Please try again later");



      _burn(account, scaledAmount);
  } */

  function balanceOfPrincipal(address account) external view override returns (uint256) {
      return super.balanceOf(account).wadMul(_initialExchangeRates[account]);
  }

  function balanceOfScaled(address account) public view override returns (uint256) {
      return super.balanceOf(account);
  }

  function balanceOfAvailablePrincipal(address account) public view override returns (uint256) {
      address collateralAddress = _accountCollateralInstances[account];
      uint256 principal;
      if (collateralAddress != address(0)) {
          principal = ICollateral(collateralAddress).balanceOfPrincipal();
      }
      return principal;
  }

  // value of borrowers collateral being used against debt plus idle principal in collateral cocntract
  function balanceOfAndPrincipal(address account) public view override returns (uint256) {
      uint256 balanceOf = balanceOf(account);
      console.log("col token balanceOf", balanceOf);
      uint256 principal = balanceOfAvailablePrincipal(account);
      console.log("col token principal", principal);
      return balanceOf.add(principal);
  }

  // value of borrowers collateral being used against debt
  function balanceOf(address account) public view virtual override returns (uint256) {
      uint256 scaledAmount = super.balanceOf(account);
      uint256 collateralExchangeRate = _poolAssetData.simulateCollateralExchangeRate(_underlyingAsset);
      return scaledAmount.wadMul(collateralExchangeRate);
  }

  function totalScaledSupply() external view override returns (uint256) {
      return super.totalSupply();
  }

  function totalSupply() public view virtual override returns (uint256) {
      uint256 collateralExchangeRate = _poolAssetData.simulateCollateralExchangeRate(_underlyingAsset);
      return super.totalSupply().wadMul(collateralExchangeRate);
  }

  // bridging may not be accurately depicted due to off chain events taking place in ddifferent blocks
  // total amount currently available through aUST
  function bridgeTotalScaledSupply() external view returns (uint256) {
      return _routerWrapped.balanceOf(address(this)); //aUST
  }

  function bridgeTotalScaledSupplyStored() external view returns (uint256) {
      return bridgeTotalSupply; // stored
  }

  function collateralAddress(address account) external view override returns (address) {
      return _accountCollateralInstances[account];
  }

  function burnToSavings(address account, uint256 amount, address _to, uint256 exchangeRate) external override onlyPool {
      uint256 amountScaled = amount.wadDiv(exchangeRate);
      require(amountScaled != 0, "Error: Invalid burn amount");
      _burn(account, amountScaled);

      ( , uint256 bridgeExchangeRate) = IExchangeRateData(ADDRESSES_PROVIDER.getExchangeRateData()).getInterestData();
      uint256 _toAmount = amount.wadDiv(bridgeExchangeRate);
      _routerWrapped.safeTransfer(_to, _toAmount);

      emit Burn(account, amount, exchangeRate);
  }

}
